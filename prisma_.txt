generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  name          String?
  phone         String?
  role          Role     @default(USER)
  addresses     Address[]
  wishlist      WishlistItem[]
  orders        Order[]
  reviews       Review[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  line1     String
  line2     String?
  city      String
  state     String?
  country   String   @default("UAE")
  zip       String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  parentId  String?
  parent    Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
  createdAt DateTime @default(now())
}

model Product {
  id           String         @id @default(cuid())
  title        String
  slug         String         @unique
  description  String
  specs        Json?
  material     String?
  threadCount  Int?
  color        String?
  images       ProductImage[]
  categoryId   String
  category     Category       @relation(fields: [categoryId], references: [id])
  variants     Variant[]
  ratingAvg    Float          @default(0)
  ratingCount  Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  order     Int      @default(0)
  createdAt DateTime @default(now())
}

model Variant {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  sku       String   @unique
  size      Size
  price     Int // in fils (AED cents)
  compareAt Int? // in fils (AED cents)
  stock     Int      @default(0)
  createdAt DateTime @default(now())
}

enum Size {
  SINGLE
  QUEEN
  KING
}

enum Role {
  USER
  ADMIN
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  variantId String
  variant   Variant  @relation(fields: [variantId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id               String       @id @default(cuid())
  userId           String
  user             User         @relation(fields: [userId], references: [id])
  address          Json
  items            Json
  subtotal         Int
  shipping         Int
  vat              Int
  discount         Int
  total            Int
  paymentProvider  String
  paymentIntentId  String?
  paymentStatus    String       @default("pending")
  status           OrderStatus  @default(PLACED)
  trackingId       String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

enum OrderStatus {
  PLACED
  CONFIRMED
  PACKED
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURN_REQUESTED
  RETURNED
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  rating      Int
  comment     String?
  photos      Json?
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  type        CouponType
  value       Int
  minSubtotal Int?
  usageLimit  Int?
  startsAt    DateTime?
  endsAt      DateTime?
  createdAt   DateTime @default(now())
}

enum CouponType {
  PERCENT
  FIXED
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}